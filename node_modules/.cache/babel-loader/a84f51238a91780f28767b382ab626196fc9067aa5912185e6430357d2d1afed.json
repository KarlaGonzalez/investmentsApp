{"ast":null,"code":"var _jsxFileName = \"/Users/karma/Desktop/react-complete-guide/Investments_app/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Header from \"./components/Header/Header\";\nimport ResultsTable from \"./components/ResultsTable/ResultsTable\";\nimport UserInput from \"./components/UserInput/UserInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //const [results, setResults] = useState(null);\n  const [userInput, setUserInput] = useState(null); // Initial investment - 'current-savings'\n\n  // Triggered when form is submitted\n  const calculateHandler = userInput => {\n    setUserInput(userInput);\n\n    //Store the state and pass it to results comp - Approach a)\n    //setResults(yearlyData);\n  };\n\n  // 'Derived approach' - Guide: 'Approach b) - ‘Derived’ state based on the userInput'\n  const yearlyData = []; // per-year results\n\n  if (userInput) {\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        year: i + 1,\n        //current loop itereation + 1\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserInput, {\n      onCalculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), !userInput && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"No investments calculated yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 22\n    }, this), userInput && /*#__PURE__*/_jsxDEV(ResultsTable, {\n      data: yearlyData,\n      initialInvestment: userInput['current-savings']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"nCOotz9vTgzH/m310d2/03oFEtk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Header","ResultsTable","UserInput","jsxDEV","_jsxDEV","App","_s","userInput","setUserInput","calculateHandler","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalculate","style","textAlign","data","initialInvestment","_c","$RefreshReg$"],"sources":["/Users/karma/Desktop/react-complete-guide/Investments_app/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport Header from \"./components/Header/Header\";\nimport ResultsTable from \"./components/ResultsTable/ResultsTable\";\nimport UserInput from \"./components/UserInput/UserInput\";\n\nfunction App() {\n  //const [results, setResults] = useState(null);\n  const [userInput, setUserInput] = useState(null); // Initial investment - 'current-savings'\n\n  // Triggered when form is submitted\n  const calculateHandler = (userInput) => {\n    setUserInput(userInput);\n\n    //Store the state and pass it to results comp - Approach a)\n    //setResults(yearlyData);\n  };\n\n  // 'Derived approach' - Guide: 'Approach b) - ‘Derived’ state based on the userInput'\n  const yearlyData = []; // per-year results\n\n  if (userInput) {\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n  \n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        year: i + 1, //current loop itereation + 1\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n  };\n\n  return (\n    <div>\n      <Header />\n\n      <UserInput onCalculate={calculateHandler} />\n\n      {/* Shows table conditionally (only if userInput is NOT null) */}\n      {!userInput && <p style={{textAlign: 'center'}}>No investments calculated yet</p>}\n      {userInput && <ResultsTable data={yearlyData} initialInvestment={userInput['current-savings']} />}\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,YAAY,MAAM,wCAAwC;AACjE,OAAOC,SAAS,MAAM,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAElD;EACA,MAAMU,gBAAgB,GAAIF,SAAS,IAAK;IACtCC,YAAY,CAACD,SAAS,CAAC;;IAEvB;IACA;EACF,CAAC;;EAED;EACA,MAAMG,UAAU,GAAG,EAAE,CAAC,CAAC;;EAEvB,IAAIH,SAAS,EAAE;IACb,IAAII,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMK,kBAAkB,GAAG,CAACL,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMM,cAAc,GAAG,CAACN,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMO,QAAQ,GAAG,CAACP,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACO,IAAI,CAAC;QACdC,IAAI,EAAEH,CAAC,GAAG,CAAC;QAAE;QACbC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;EACF;EAAC;EAED,oBACER,OAAA;IAAAgB,QAAA,gBACEhB,OAAA,CAACJ,MAAM;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEVpB,OAAA,CAACF,SAAS;MAACuB,WAAW,EAAEhB;IAAiB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAG3C,CAACjB,SAAS,iBAAIH,OAAA;MAAGsB,KAAK,EAAE;QAACC,SAAS,EAAE;MAAQ,CAAE;MAAAP,QAAA,EAAC;IAA6B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAChFjB,SAAS,iBAAIH,OAAA,CAACH,YAAY;MAAC2B,IAAI,EAAElB,UAAW;MAACmB,iBAAiB,EAAEtB,SAAS,CAAC,iBAAiB;IAAE;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE9F,CAAC;AAEV;AAAClB,EAAA,CA9CQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAgDZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}