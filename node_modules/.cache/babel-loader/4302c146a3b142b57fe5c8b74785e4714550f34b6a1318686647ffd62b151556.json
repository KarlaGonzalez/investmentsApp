{"ast":null,"code":"var _jsxFileName = \"/Users/karma/Desktop/react-complete-guide/Investments_app/src/components/UserInput/UserInput.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst userInput = () => {\n  _s();\n  const initialUserInput = {\n    'current-savings': 10000,\n    // input id - currentSavings (cammel case is also valid)\n    'yearly-contribution': 1200,\n    'expected-return': 7,\n    'duration': 10\n  };\n\n  // State for every input - Approach State Group\n  const [userInput, setUserInput] = useState(initialUserInput);\n  const submitHandler = event => {\n    event.preventDefault(); // Prevents default reload when submitting\n    //...\n    console.log(\"SUBMIT\");\n  };\n\n  // Clears values | Resets all input to initial state\n  const resetHandler = () => {\n    setUserInput(initialUserInput);\n  };\n\n  // Approach State Group\n  // 1st param identifies event source & 2nd param should then be the value that was entered\n  const inputChangeHandler = (input, value) => {\n    setUserInput(prevInput => {\n      // automatically receives all previous values\n      return {\n        ...prevInput,\n        // copies previous input\n        [input]: value // To override the new value for the triggered input | JS syntax to dynamically access a property name, by wrapping the identifier that contains the property name we want to access\n      };\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form\",\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"current-savings\",\n          children: \"Current Savings ($)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: event => inputChangeHandler('current-savings', event.target.value),\n          value: userInput['current-savings'],\n          type: \"number\",\n          id: \"current-savings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"yearly-contribution\",\n          children: \"Yearly Savings ($)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: event => inputChangeHandler('yearly-contribution', event.target.value),\n          value: userInput['yearly-contribution'],\n          type: \"number\",\n          id: \"yearly-contribution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"expected-return\",\n          children: \"Expected Interest (%, per year)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: event => inputChangeHandler('expected-return', event.target.value),\n          value: userInput['current-savings'],\n          type: \"number\",\n          id: \"expected-return\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"duration\",\n          children: \"Investment Duration (years)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: event => inputChangeHandler('duration', event.target.value),\n          value: userInput.duration,\n          type: \"number\",\n          id: \"duration\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"reset\",\n        className: \"buttonAlt\",\n        onClick: resetHandler,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"button\",\n        children: \"Calculate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_s(userInput, \"OL/F48CuRZxN7OtvePsAMgZjytM=\");\nexport default userInput;","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","userInput","_s","initialUserInput","setUserInput","submitHandler","event","preventDefault","console","log","resetHandler","inputChangeHandler","input","value","prevInput","className","onSubmit","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","onChange","target","type","id","duration","onClick"],"sources":["/Users/karma/Desktop/react-complete-guide/Investments_app/src/components/UserInput/UserInput.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst userInput = () => {\n    const initialUserInput = {\n        'current-savings': 10000, // input id - currentSavings (cammel case is also valid)\n        'yearly-contribution': 1200,\n        'expected-return': 7,\n        'duration': 10,\n    };\n\n    // State for every input - Approach State Group\n    const [userInput, setUserInput] = useState(initialUserInput);\n\n    const submitHandler = (event) => {\n        event.preventDefault(); // Prevents default reload when submitting\n        //...\n        console.log(\"SUBMIT\");\n    };\n\n    // Clears values | Resets all input to initial state\n    const resetHandler = () => {\n        setUserInput(initialUserInput);\n    };\n\n    // Approach State Group\n    // 1st param identifies event source & 2nd param should then be the value that was entered\n    const inputChangeHandler = (input, value) => {\n        setUserInput((prevInput) => { // automatically receives all previous values\n            return {\n              ...prevInput, // copies previous input\n              [input]: value // To override the new value for the triggered input | JS syntax to dynamically access a property name, by wrapping the identifier that contains the property name we want to access\n            }\n        });\n    };\n\n    return (\n        <form className=\"form\" onSubmit={submitHandler}>\n            <div className=\"input-group\">\n                <p>\n                    <label htmlFor=\"current-savings\">Current Savings ($)</label>\n                    {/* The anonymous f() will be executed only on input changes */}\n                    <input onChange={(event) => \n                            inputChangeHandler('current-savings', event.target.value)\n                        }\n                        value={userInput['current-savings']}\n                        type=\"number\"\n                        id=\"current-savings\" />\n                </p>\n                <p>\n                    <label htmlFor=\"yearly-contribution\">Yearly Savings ($)</label>\n                    <input onChange={(event) => \n                            inputChangeHandler('yearly-contribution', event.target.value)\n                        }\n                        value={userInput['yearly-contribution']}\n                        type=\"number\" \n                        id=\"yearly-contribution\" />\n                </p>\n            </div>\n            <div className=\"input-group\">\n                <p>\n                    <label htmlFor=\"expected-return\">\n                    Expected Interest (%, per year)\n                    </label>\n                    <input onChange={(event) => \n                            inputChangeHandler('expected-return', event.target.value)\n                        }\n                        value={userInput['current-savings']}\n                        type=\"number\"\n                        id=\"expected-return\" />\n                </p>\n                <p>\n                    <label htmlFor=\"duration\">Investment Duration (years)</label>\n                    <input onChange={(event) => \n                            inputChangeHandler('duration', event.target.value)\n                        }\n                        value={userInput.duration}\n                        type=\"number\"\n                        id=\"duration\" />\n                </p>\n            </div>\n            <p className=\"actions\">\n                <button type=\"reset\" className=\"buttonAlt\" onClick={resetHandler}>\n                    Reset\n                </button>\n                <button type=\"submit\" className=\"button\">\n                    Calculate\n                </button>\n            </p>\n        </form>\n    )\n}\n\nexport default userInput;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}